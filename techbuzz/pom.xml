<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
	https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<artifactId>techbuzz</artifactId>
	<version>0.0.1</version>
	<name>techbuzz</name>
	<description>TechBuzz</description>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>17</java.version>
		<bootstrap.version>5.3.1</bootstrap.version>
		<jquery.version>3.7.0</jquery.version>
		<fontawesome.version>6.4.0</fontawesome.version>
		<sendgrid-java.version>4.9.3</sendgrid-java.version>
		<testcontainers.version>1.18.3</testcontainers.version>
		<instancio.version>3.2.0</instancio.version>
		<archunit.version>1.0.1</archunit.version>

		<!-- plugins config -->
		<spotless-maven-plugin.version>2.38.0</spotless-maven-plugin.version>
		<dependency-check-maven.version>8.3.1</dependency-check-maven.version>
		<properties-maven-plugin.version>1.2.0</properties-maven-plugin.version>
		<sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
		<jooq-testcontainers-codegen-maven-plugin.version>0.0.2</jooq-testcontainers-codegen-maven-plugin.version>

		<!-- jacoco plugin config -->
		<jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
		<jacoco.minimum.coverage>80%</jacoco.minimum.coverage>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<jacoco.utReportFolder>${project.build.directory}/jacoco/test</jacoco.utReportFolder>
		<jacoco.utReportFile>${jacoco.utReportFolder}/test.exec</jacoco.utReportFile>
		<junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>

		<version.error-prone>2.19.1-picnic-1</version.error-prone>
		<version.error-prone-support>0.12.0</version.error-prone-support>
		<!-- Property using which additional Error Prone flags can be
        specified. Used by the `patch` profile. -->
		<error-prone.patch-args />

	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.ben-manes.caffeine</groupId>
			<artifactId>caffeine</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>com.sendgrid</groupId>
			<artifactId>sendgrid-java</artifactId>
			<version>${sendgrid-java.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${bootstrap.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars.npm</groupId>
			<artifactId>bootswatch</artifactId>
			<version>${bootstrap.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${jquery.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>font-awesome</artifactId>
			<version>${fontawesome.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.instancio</groupId>
			<artifactId>instancio-junit</artifactId>
			<version>${instancio.version}</version>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit</artifactId>
			<version>${archunit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<includeOnlyProperties>
						<includeOnlyProperty>^git.branch$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.user.name$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.message.full$</includeOnlyProperty>
					</includeOnlyProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.diffplug.spotless</groupId>
				<artifactId>spotless-maven-plugin</artifactId>
				<version>${spotless-maven-plugin.version}</version>
				<configuration>
					<java>
						<importOrder />
						<removeUnusedImports />
						<palantirJavaFormat>
							<version>2.30.0</version>
						</palantirJavaFormat>
						<formatAnnotations />
					</java>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.github.sivalabs</groupId>
				<artifactId>jooq-testcontainers-codegen-maven-plugin</artifactId>
				<version>${jooq-testcontainers-codegen-maven-plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.testcontainers</groupId>
						<artifactId>postgresql</artifactId>
						<version>${testcontainers.version}</version>
					</dependency>
					<dependency>
						<groupId>org.postgresql</groupId>
						<artifactId>postgresql</artifactId>
						<version>${postgresql.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>generate-jooq-sources</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<database>
								<type>POSTGRES</type>
								<containerImage>postgres:15.3-alpine</containerImage>
							</database>
							<flyway>
								<locations>
									filesystem:${project.basedir}/src/main/resources/db/migration
								</locations>
							</flyway>
							<generator>
								<generate>
									<!--<pojos>true</pojos>
									<daos>true</daos>
									<springAnnotations>true</springAnnotations>
									<pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>-->
									<javaTimeTypes>true</javaTimeTypes>
									<validationAnnotations>false</validationAnnotations>
								</generate>
								<database>
									<inputSchema>public</inputSchema>
									<includes>.*</includes>
									<excludes>flyway_schema_history</excludes>
									<forcedTypes>
										<forcedType>
											<userType>com.sivalabs.techbuzz.users.domain.models.RoleEnum</userType>
											<enumConverter>true</enumConverter>
											<includeExpression>public\.users\.role</includeExpression>
										</forcedType>
									</forcedTypes>
								</database>
								<!-- Rename the generated POJOs and DAOs classes -->
								<!--<strategy>
                                  <matchers>
                                    <tables>
                                      <table>
                                        <pojoClass>
                                          <expression>JOOQ_$0</expression>
                                          <transform>PASCAL</transform>
                                        </pojoClass>
                                        <daoClass>
                                          <expression>$0_Repository</expression>
                                          <transform>PASCAL</transform>
                                        </daoClass>
                                      </table>
                                    </tables>
                                  </matchers>
                                </strategy>-->
								<target>
									<clean>true</clean>
									<packageName>com.sivalabs.techbuzz.jooq</packageName>
									<directory>src/main/jooq</directory>
								</target>
							</generator>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>add-source</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<sources>
								<source>src/main/jooq</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>${properties-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<files>
								<file>sonar-project.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<configuration>
					<excludes>
						<exclude>com/sivalabs/techbuzz/jooq/**</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>pre-unit-tests</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.utReportFile}</destFile>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
					<execution>
						<id>post-unit-test</id>
						<goals>
							<goal>report</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<dataFile>${jacoco.utReportFile}</dataFile>
							<outputDirectory>${jacoco.utReportFolder}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.utReportFile}</dataFile>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.minimum.coverage}</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>${dependency-check-maven.version}</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>sonar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>error-prone</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<annotationProcessorPaths combine.children="append">
								<!-- Picnic's Error Prone fork. -->
								<path>
									<groupId>com.github.PicnicSupermarket.error-prone</groupId>
									<artifactId>error_prone_core</artifactId>
									<version>${version.error-prone}</version>
								</path>
								<!-- Error Prone Support's additional bug checkers. -->
								<path>
									<groupId>tech.picnic.error-prone-support</groupId>
									<artifactId>error-prone-contrib</artifactId>
									<version>${version.error-prone-support}</version>
								</path>
								<!-- Error Prone Support's Refaster templates. -->
								<path>
									<groupId>tech.picnic.error-prone-support</groupId>
									<artifactId>refaster-runner</artifactId>
									<version>${version.error-prone-support}</version>
								</path>
							</annotationProcessorPaths>
							<compilerArgs>
								<!-- Enable and configure Error Prone. -->
								<arg>
									-Xplugin:ErrorProne
									<!-- We use a separate Maven profile to
                                    raise all warnings as errors. This way one
                                    can optionally collect all warnings without
                                    failing the build on the first error
                                    encountered. -->
									-XepAllErrorsAsWarnings
									<!-- -XepAllSuggestionsAsWarnings-->
									<!-- We want to enable almost all Error
                                    Prone bug pattern checkers, so we enable
                                    all and then selectively deactivate some. -->
									-XepAllDisabledChecksAsWarnings
									<!-- Some generated classes violate Error
                                    Prone bug patterns. We cannot in all cases
                                    avoid that, so we simply tell Error Prone
                                    not to warn about generated code. -->
									-XepDisableWarningsInGeneratedCode
									-XepExcludedPaths:\Q${project.build.directory}${file.separator}\E.*
									<!-- We don't target Android. -->
									-Xep:AndroidJdkLibsChecker:OFF
									<!-- We don't target JDK 7. -->
									-Xep:Java7ApiChecker:OFF
									<!-- We don't target JDK 8. -->
									-Xep:Java8ApiChecker:OFF
									<!-- We generally discourage `var` use. -->
									-Xep:Varifier:OFF
									<!-- Disabled for demo purposes. -->
									-Xep:SystemOut:OFF
									<!-- Refaster name pattern example:
                                    -XepOpt:Refaster:NamePattern=^(?!(Immutable.*Rules)).*
                                    -->
									<!--
                                    START Error Prone Support configuration.
                                    -->
									<!-- XXX: Enable once sufficiently
                                    configurable. -->
									-Xep:LexicographicalAnnotationListing:OFF
									<!-- XXX: Enable once false positives no longer
                                    have a major performance impact. -->
									-Xep:MethodReferenceUsage:OFF
									<!-- XXX: Disabled as it is not a clear
                                    improvement. -->
									-Xep:StringJoin:OFF
									-XepOpt:ErrorProneSupport:IgnoreClasspathCompat=true
									-XepExcludedPaths:.*/src/main/jooq/.*
									<!--
                                    END Error Prone Support configuration.
                                    -->
									<!-- Append additional custom arguments. -->
									${error-prone.patch-args}
								</arg>
								<arg>-XDcompilePolicy=simple</arg>
							</compilerArgs>
							<showWarnings>true</showWarnings>
							<!-- <failOnWarning>true</failOnWarning> -->
						</configuration>
					</plugin>
				</plugins>
			</build>
			<!-- The code is built against a Picnic-managed fork of Error
            Prone. This fork is hosted by Jitpack.io. See
            https://jitpack.io/#PicnicSupermarket/error-prone. -->
			<repositories>
				<repository>
					<id>jitpack.io</id>
					<url>https://jitpack.io</url>
				</repository>
			</repositories>
		</profile>
		<profile>
			<!-- If combined with the `error-prone` profile above, this profile
            configures Error Prone to try and automatically fix (rather than
            merely flag) bug pattern violations in the source code. -->
			<id>patch</id>
			<properties>
				<error-prone.patch-args>-XepPatchChecks:${error-prone.patch-checks} -XepPatchLocation:IN_PLACE</error-prone.patch-args>
				<!-- One can override this value to specify which checks should be patched. -->
				<error-prone.patch-checks />
			</properties>
		</profile>
	</profiles>

</project>
